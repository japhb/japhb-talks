# Why Perl 6?

### Geoff Broadwell

gjb@google.com

japhb on Freenode and GitHub
----
## Guiding principles

<!-- See http://www.perl.com/pub/2003/06/25/perl6essentials.html
     and http://irclog.perlgeek.de/perl6/2014-04-24#i_8632910 -->
----
*Make the easy things easy,*

and the hard things possible.
----
## Proper REPL
----
```
$ perl6
> say 'Hello World!';
Hello World!
> (^10).list
0 1 2 3 4 5 6 7 8 9
> enum Features < Powerful Concise Flexible >;
> say Features.pick(3);
Flexible Concise Powerful
>
```
----
## Simplified common operations
----
```
if 0 < $a < 27 { ... }
if $b eq 'foo' | 'bar' | 'baz' { ... }
if [<=] @values { say 'sorted' }

my $count = +@players;
my $sum   = [+] @scores;
my $dot   = [+] @vec1 »*« @vec2;
my $range = minmax @values;
```
----
## Huffmanized closures
----
```
# Expression closures using '*'
$max - *
*.chars > 5
(* ~ '.html').path.e

# Bare block closures with implicit arguments
{ .underage_by = max(0, 18 - .age) }
{ "Coords: ($^x, $^y, $^z)" }

# Pointy block closures with explicit arguments
-> $name, $rank, $serial? { ... }
```
----
## Powerful, flexible builtins
----
<!-- examples/sort -->

```
# Type-sensitive stable default sort
@strings.sort          # ascending
@numbers.sort.reverse  # descending

# Sort according to an extracted key
@planets.sort(*.mass)

# Sort using a custom comparator:
#    ascending numeric on column 4,
#   descending stringy on column 2
@table-rows.sort({  $^a[3] <=> $^b[3]
                 || $^b[1] leg $^a[1] })
```
----
## Easy tool making: MAIN/USAGE
----
<!-- examples/app -->

```
#= List known instances
multi MAIN('list') { ... }

#= Initialize a new instance
multi MAIN('init', Str $name = 'DEFAULT') { ... }

#= Delete an instance
multi MAIN('delete', Str $name, Bool :$force) { ... }
```
----
```
$ ./app  # or `./app -?` or `./app --help`
Usage:
  ./app list -- List known instances
  ./app init [<name>] -- Initialize a new instance
  ./app [--force] delete <name> -- Delete an instance
```
----
*We're designing a language for the next several decades; take the long view.*
----
## Sane type system
----
Scalars: Bool, Int, Num, Rat, Str, IO, ...

Natives: uint8, int32, num32, num64, ...

Aggregates: Pair, Array, Hash, Bag, Set, ...

Errors: Exception, Failure, X::*, ...

Specials: Mu, Any, Junction, Cool, ...

Roles: Numeric, Stringy, Positional, ...
----
![Type graph subset centered on Numeric](images/type-graph-Numeric.svg)
----
## Subset types
----
```
> subset Palindrome of Str where { $^a eq $^a.flip }
> 'foobar' ~~ Palindrome
False
> 'deified' ~~ Palindrome
True
```
----
## Gradual typing
----
```
my $foo;           # No useful type info
my $num;           # A number?  Maybe?
my Numeric  $num;  # Definitely acts like a number!
my Real     $num;  # A real number (not e.g. Complex)
my Rational $num;  # A rational number
my Int      $num;  # An arbitrary length integer
my uint32   $num;  # A 32-bit unsigned integer
```
----
```
my $a;         # Constraint: none,            default type: Any
my @a;         # Constraint: Positional,      default type: Array
my Str @a;     # Constraint: Positional[Str], default type: Array[Str]
my Str @a[4];  # ... with exactly 4 elements
```
----
## Compile-time type checking
----
<!-- examples/type-error -->

```
sub double(Numeric $val) { $val * 2 }
say double('bar');
```

```
$ perl6 type-error
===SORRY!=== Error while compiling type-error
Calling 'double' will never work with argument types (str)
    Expected: :(Numeric $val)
at type-error:2
------> say ⏏double('bar');
```
----
## Multi-dispatch
----
<!-- examples/type-multi -->

```
multi double(Numeric $val) { $val * 2 }
multi double(Stringy $val) { $val x 2 }
say double('bar');
```

```
$ perl6 type-multi
barbar
```
----
## Clear, concise OO syntax
----
<!-- examples/simple-oo -->

```
class Widget {
    has @.parts;        # Attribute + RO accessor
    has $.brand is rw;  # Attribute + RW accessor
    has $!code-name;    # Private attribute

    method list-bom() {
        .say for @.parts;
    }
}
```
----
## Roles
----
<!-- examples/roles -->

```
class Person { }

role Doctor {
    has $.tricorder;
    method cure(Person $p) { say "He's dead, Jim." }
}

role Officer {
    has $.rank;
    method command(Person $p, *@tasks) { }
}

class ChiefMedicalOfficer
    is   Person
    does Officer
    does Doctor { }
```
----
```
role BrickLayer {
    has $.trowel;
    method cure($mortar) { say 'Just let it set awhile.' }
}

my ChiefMedicalOfficer $Bones .= new;

say $Bones.^does(Doctor);      # True
say $Bones.^does(BrickLayer);  # False
say $Bones.^attributes».name;  # $!tricorder $!rank
```
----
<!-- examples/role-collision -->

```
class HortaHealer
    is   Person
    does Doctor
    does BrickLayer { }

my HortaHealer $doc .= new;
```

```
===SORRY!===
Method 'cure' must be resolved by class HortaHealer
because it exists in multiple roles (BrickLayer, Doctor)
```
----
## Delegation
----
<!-- Based on examples in the delegation spec:
http://perlcabal.org/syn/S12.html#Delegation -->

```
class Dog {
    has $.tail  handles 'wag';
    has $.legs  handles < walk run lope shake lift >;
    has $.fur   handles Groomable;
    has $.brain handles *;
}
```
----
## Introspection
----
<!-- examples/introspection -->

```
my  $half = 1/2;
say $half.WHAT;         # (Rat)
say $half.WHICH;        # Rat|1/2
say $half.WHERE;        # 140230308392360
say $half.HOW;          # Perl6::Metamodel::ClassHOW.new()
say $half.^mro;         # (Rat) (Cool) (Any) (Mu)
say $half.^attributes;  # Int $!numerator Int $!denominator
say $half.^methods;     # FatRat Num Int new nude norm
                        # floor ceiling abs sqrt sign ...
```
----
## Classes all the way down
----
![.HOW chain starting at Rat|1/2](images/HOW.svg)
----
## Metamodel programming
----
<!-- examples/metamodel -->

```
# Equivalent to:  class MyShinyNewClass { has Int $.val; }

my $name  := 'MyShinyNewClass';
my $class := Metamodel::ClassHOW.new_type(:$name);
my $attr  := Attribute.new(:name('$!val'), :type(Int),
                           :package($class), :has_accessor);

$class.HOW.add_parent($class, Any);
$class.^add_attribute($attr);
$class.^compose;
```
----
*Three great virtues of a programmer:*

*Laziness, Impatience, and Hubris.*
----
## Lazy evaluation
----
<!-- examples/laziness -->

```
my  @odd-numbers  := 1, 3 ... *;
my  @odd-squares  := @odd-numbers.map: { $_ * $_ };
my  @palin-odd-sq := @odd-squares.grep: { $_ eq $_.flip };
say @palin-odd-sq[5];

--->  14641
```
----
## gather / take
----
<!-- examples/gather-take -->

```
sub squish(*@list) {
    gather for @list {
        state $previous = take $_;
        next if $_ === $previous;
        $previous = take $_;
    }
}
say squish(1, 2, 2, 2, 1, 5, 5, 9);

---> 1 2 1 5 9
```
----
## Parallelizable ops
----
```
my @negated = -«@val;
my @doubled = @val »*» 2;
my @ratios  = @num »/« @den;

@increasing »+=» 123;
```
----
## Feeds (pipelines)
----
<!-- examples/feed -->

```
$file.IO.slurp.lines
    ==> parse-lines()
    ==> grep(*.is-header)
    ==> map({ '  ' x .depth ~ .text })
    ==> my @outline;
```
----
## Threading
----
<!-- From jnthn's rant on thread-safe programming, with some slight adjustments for clarity here:
http://6guts.wordpress.com/2014/04/17/racing-to-writeness-to-wrongness-leads/ -->

```
# Compute a histogram of words across many files
# Process each file in a separate task using a thread pool
my @all_counts = await do for @files -> $filename {
    start {
        my %word_counts;
        for slurp($filename).words {
            %word_counts{$_}++;
        }
        %word_counts
    }
}

# Bring the subtotals together into a single result
my %totals;
for @all_counts {
    %totals{.key} += .value;
}
```
----
## Promises
----
```
my $promise = Promise.new;            # Thread-safe promise to do or die
my $combined-promise                  # Do something more after first
    = $promise.then({ say .status })  #     promise completes

my $vow = $promise.vow;  # Exclusive right to set promise status once
$vow.keep($result);      # Set Kept   and $promise.result
                         #  - OR -
$vow.break($exception);  # Set Broken and $promise.cause
```
----
<!-- XXXX: Is this misleading because a timeout doesn't
stop the long calculation in progress? -->

```
# Both start {} and Promise.in() return Promises
my $calc  = start { ... long running calculation ... };
my $timer = Promise.in($timeout);

await Promise.anyof($calc, $timer);
say $calc.status == Kept ?? $calc.result !! 'Timed out!';
```
----
## Channels: producer/consumer
----
<!-- examples/channels -->

```
# Concurrent blocking queues between stages
my $source = Channel.new;
my $sink   = Channel.new;

# Stage 1: 1 source/preparation task
start {
    @jobs.map: { $source.send(prepare-job($_)) };
    $source.close;
}

# Stage 2: 4 worker/processing tasks
for ^4 {
    start { loop { winner $source {
	more * { $sink.send(process-job($_)) }
	done * { $sink.close; last }
    } } }
}

# Stage 3: 1 sink/output task (in main thread)
.say for $sink.list;
```
----
## Supplies: publish/subscribe
----
XXXX: convenience methods, composability, sanity, combinators and metacombinators
----
## Filesystem watchers
----
<!-- From the code that builds this very presentation:
https://github.com/japhb/japhb-talks/blob/master/tools/make-presentations -->

```
watch-tree($.root-dir, :skip< .git 3rdparty >)\
    .uniq(:as(*.path), :expires(1))\
    .map(*.path)\
    .grep({ interesting-path($_) })\
    .act(-> $path {
        $!log.more: "Noticed change at $path";
        self.load-templates if $path ~~ /^ $tmpl-dir /;
        self.load-decks     if $path ~~ / $json-path /;
        self.gen-presentations;
    });
```
----
## Async I/O
----
XXXX
----
*Communication can only happen when you agree on the language.*
----
## Grammars
----
<!-- Yes, this is the real grammar:
https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm -->

```
grammar JSON::Tiny::Grammar;

token TOP       { ^ \s* [ <object> | <array> ] \s* $ }
rule object     { '{' ~ '}' <pairlist>  }
rule pairlist   { <pair> * % \,         }
rule pair       { <string> ':' <value>  }
rule array      { '[' ~ ']' <arraylist> }
rule arraylist  {  <value> * % [ \, ]   }
```
----
```
proto token value {*}
token value:sym<number> {
    '-'?
    [ 0 | <[1..9]> <[0..9]>* ]
    [ \. <[0..9]>+ ]?
    [ <[eE]> [\+|\-]? <[0..9]>+ ]?
}
token value:sym<true>    { <sym>    }
token value:sym<false>   { <sym>    }
token value:sym<null>    { <sym>    }
token value:sym<object>  { <object> }
token value:sym<array>   { <array>  }
token value:sym<string>  { <string> }
```
----
```
token string {
    \" ~ \" [ <str> | \\ <str=.str_escape> ]*
}
token str {
    <-["\\\t\n]>+
}
token str_escape {
    <["\\/bfnrt]> | u <xdigit>**4
}
```
----
## Grammars --> parse trees
----
```
> say JSON::Tiny::Grammar.parse(q{ [1, "foo", {"answer": 42}] })
｢ [1, "foo", {"answer": 42}] ｣
 array => ｢[1, "foo", {"answer": 42}] ｣
  arraylist => ｢1, "foo", {"answer": 42}｣
   value => ｢1｣
   value => ｢"foo"｣
    string => ｢"foo"｣
     str => ｢foo｣
   value => ｢{"answer": 42}｣
    object => ｢{"answer": 42}｣
     pairlist => ｢"answer": 42｣
      pair => ｢"answer": 42｣
       string => ｢"answer"｣
        str => ｢answer｣
       value => ｢42｣
```
----
## Actions
----
<!-- This is again the real code, but I've reformatted a little for clarity:
https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Actions.pm -->

```
class JSON::Tiny::Actions;

method TOP($/)       { make $/.values.[0].ast }
method object($/)    { make $<pairlist>.ast.hash.item }
method pairlist($/)  { make $<pair>>>.ast.flat }
method pair($/)      { make $<string>.ast => $<value>.ast }
method array($/)     { make $<arraylist>.ast.item }
method arraylist($/) { make [$<value>>>.ast] }
method string($/)    {
    make +@$<str> == 1
        ?? $<str>[0].ast
        !! $<str>>>.ast.join;
}
```
----
```
method value:sym<number>($/) { make +$/.Str }
method value:sym<string>($/) { make $<string>.ast }
method value:sym<true>($/)   { make Bool::True  }
method value:sym<false>($/)  { make Bool::False }
method value:sym<null>($/)   { make Any }
method value:sym<object>($/) { make $<object>.ast }
method value:sym<array>($/)  { make $<array>.ast }

method str($/)               { make ~$/ }
```
----
```
my %h = '\\' => "\\",
        '/'  => "/",
        'b'  => "\b",
        'n'  => "\n",
        't'  => "\t",
        'f'  => "\f",
        'r'  => "\r",
        '"'  => "\"";
method str_escape($/) {
    if $<xdigit> {
        make chr(:16($<xdigit>.join));
    } else {
        make %h{~$/};
    }
}
```
----
## Grammars + Actions --> syntax trees
----
```
> my  $json = q{ [1, "foo", {"answer": 42}] };
  my  JSON::Tiny::Actions $actions .= new;
  say JSON::Tiny::Grammar.parse($json, :$actions).ast.perl;
[1, "foo", {"answer" => 42}]

> say from-json($json).perl;  # Convenience routines FTW
[1, "foo", {"answer" => 42}]
```
----
## Operators
----
Unicode
----
Texas
----
Roll your own
----
## Miscellaneous
----
Portability
----
Community
----
Debugger
----
Hackable

XXXX: Rakudo/NQP/VM layering diagram
----
*Give the user lots of tools to find and fix bugs.*
----
## Awesome error messages
----
```
$ perl6 -e 'saw "Hello!"'
===SORRY!=== Error while compiling -e
Undeclared routine:
    saw used at line 1. Did you mean 'say'?
```
----
## Deep inspection
----
XXXX: Going deeper: .Str, .gist, .perl, .DUMP
----
XXXX: NativeCall
----
# Why Perl 6?
----
## SO
----
## SO MANY
----
## SO MANY REASONS
----
XXXX: EXTRAS
----
*TIMTOWTDI:*

*There Is More Than One Way To Do It*

<!-- XXXX: Syntax variations? -->
----
## XXXX: Convert all examples to files in examples/ dir
----
Triangular numbers example

----
## Composable building blocks
----
```
> .say for permutations(3)
0 1 2
0 2 1
1 0 2
1 2 0
2 0 1
2 1 0
> .say for combinations(4, 2)
0 1
0 2
0 3
1 2
1 3
2 3
```
----
XXXX: More builtins examples

Str:  comb, samecase, samespace, trans, indent, unival

Any:  classify/categorize with :into, minmax

Mu:   perl, DUMP

List: end, fmt, munch, pick, roll, rotate, rotor, kv
----
XXXX: HOW, metaclass roles, KnowHOW, 6model, STables, etc.
XXXX: Draw out with graphviz or pic
