# Why Perl 6?

Geoff Broadwell

gjb@google.com
----
# Guiding principles

<!-- XXXX: See http://www.perl.com/pub/2003/06/25/perl6essentials.html
     and http://irclog.perlgeek.de/perl6/2014-04-24#i_8632910 -->
----
TIMTOWTDI:

There Is More Than One Way To Do It

<!-- XXXX: Syntax variations? -->
----
We're designing a language for the next several decades;

take the long view.
----
# Sane type system
----
Scalars: Bool, Int, Num, Rat, Str, IO, ...

Natives: uint8, int32, num64, ...

Aggregates: Pair, Array, Hash, Bag, Set, ...

Errors: Exception, Failure, X::*, ...

Specials: Mu, Any, Junction, Cool, ...

Roles: Numeric, Stringy, Positional, ...
----
![Type graph subset centered on Numeric](images/type-graph-Numeric.svg)
----
# Gradual typing
----
```
my $a;      # Constraint: none,            default type: Any
my @a;      # Constraint: Positional,      default type: Array
my Str @a;  # Constraint: Positional[Str], default type: Array[Str]
```
----
# Compile-time type checking
----
```
$ cat type-error
sub double(Numeric $val) { $val * 2 }
say double('bar');

$ perl6 type-error
===SORRY!=== Error while compiling type-error
Calling 'double' will never work with argument types (str)
    Expected: :(Numeric $val)
at type-error:2
------> say ⏏double('bar');
```
----
# Multi-dispatch
----
```
$ cat type-multi
multi double(Numeric $val) { $val * 2 }
multi double(Stringy $val) { $val x 2 }
say double('bar');

$ perl6 type-multi
barbar
```
----
# Clear, concise OO syntax
----
```
class Widget {
    has @.parts;
    has $.brand is rw;
    has $!code-name;

    method list-bom() {
        .say for @.parts;
    }
}
```
----
XXXX: Roles
----
XXXX: Delegation
----
# Introspection
----
```
my $half = 1/2;
say $half.WHAT;         # (Rat)
say $half.WHICH;        # Rat|1/2
say $half.WHERE;        # 140230308392360
say $half.HOW;          # Perl6::Metamodel::ClassHOW.new()
say $half.^mro;         # (Rat) (Cool) (Any) (Mu)
say $half.^attributes;  # Int $!numerator Int $!denominator
say $half.^methods;     # FatRat Num Int new nude norm
                        # floor ceiling abs sqrt sign ...
```
----
# Classes all the way down
----
XXXX: HOW, metaclass roles, KnowHOW, 6model, STables, etc.

Rat -> Perl6::Metamodel::ClassHOW -> NQP::ClassHOW -> KnowHOW -> loop at end
----
# Metamodel programming
----
```
# class MyShinyNewClass { has Int $.val; }
my $name  := 'MyShinyNewClass';
my $class := Perl6::MetaModel::ClassHOW.new_type(:$name);
my $attr  := Attribute.new(:name('$!val'), :type(Int),
                           :package($class), :has_accessor);
$class.HOW.add_parent($class, Any);
$class.^add_attribute($attr);
$class.^compose;
```
----
# Laziness
----
```
my @odd    := 1, 3 ... *;
my @odd_sq := @odd.map: { $_ * $_ };
say @odd_sq[5];

# 121
```
----
# gather / take
----
```
my @squished = gather for @list {
    state $previous = take $_;
    next if $_ === $previous;
    $previous = take $_;
}
```
----
# Parallelizable ops
----
```
my @negated = -«@val;
my @doubled = @val »*» 2;
my @ratios  = @num »/« @den;

@growing »+=» 123;
```
----
# Feeds (pipelines)
----
```
$file.IO.slurp.lines
    ==> parse-lines()
    ==> grep(*.is-header)
    ==> map({ '  ' x .depth ~ .text })
    ==> my @outline;
```
----
# Threading
----
```
XXXX: Checksums of dir tree example
```

XXXX: Check against jnthn rant!
----
Channels, Supplies, Promises

XXXX: convenience methods, composability, sanity
----
Async I/O

XXXX
----
# Grammars
----
<!-- Yes, this is the real grammar; see:
https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm -->

```
grammar JSON::Tiny::Grammar;

token TOP       { ^ \s* [ <object> | <array> ] \s* $ }
rule object     { '{' ~ '}' <pairlist>  }
rule pairlist   { <pair> * % \,         }
rule pair       { <string> ':' <value>  }
rule array      { '[' ~ ']' <arraylist> }
rule arraylist  {  <value> * % [ \, ]   }
```
----
```
proto token value {*}
token value:sym<number> {
    '-'?
    [ 0 | <[1..9]> <[0..9]>* ]
    [ \. <[0..9]>+ ]?
    [ <[eE]> [\+|\-]? <[0..9]>+ ]?
}
token value:sym<true>    { <sym>    }
token value:sym<false>   { <sym>    }
token value:sym<null>    { <sym>    }
token value:sym<object>  { <object> }
token value:sym<array>   { <array>  }
token value:sym<string>  { <string> }
```
----
```
token string {
    \" ~ \" [ <str> | \\ <str=.str_escape> ]*
}
token str {
    <-["\\\t\n]>+
}
token str_escape {
    <["\\/bfnrt]> | u <xdigit>**4
}
```
----
# Operators
----
Unicode
----
Texas
----
# Miscellaneous
----
Portability
----
Community
----
Debugger
----
Hackable

XXXX: Rakudo/NQP/VM layering diagram
----
Give the user lots of tools to find and fix bugs.
----
# Awesome error messages
----
```
$ perl6 -e 'saw "Hello!"'
===SORRY!=== Error while compiling -e
Undeclared routine:
    saw used at line 1. Did you mean 'say'?
```
----
# Deep inspection
----
XXXX: .Str, .gist, .perl, .DUMP
----
**Make the easy things easy,**
and the hard things possible.
----
# REPL
----
```
$ perl6
> say 'Hello World!';
Hello World!
> my @triangular := [\+] 1 ... *; say @triangular[^10];
1 3 6 10 15 21 28 36 45 55
> enum Features < Powerful Concise Flexible >;
> say Features.pick(3);
Flexible Concise Powerful
>
```
----
# MAIN/USAGE
----
```
#= List known instances
multi MAIN('list') { ... }

#= Initialize a new instance
multi MAIN('init', Str $name = 'DEFAULT') { ... }

#= Delete an instance
multi MAIN('delete', Str $name, Bool :$force) { ... }
```
----
```
$ ./app   # or `./app -?` or `./app --help`
Usage:
  ./app list -- List known instances
  ./app init [<name>] -- Initialize a new instance
  ./app [--force] delete <name> -- Delete an instance
```
----
# Simplified common operations
----
```
if 0 < $a < 27 { ... }
if $b eq 'foo' | 'bar' { ... }
if [<=] @values { say 'sorted' }
my $sum = [+] @values;
my $dot = [+] @vec1 »*« @vec2;
```
----
# Huffmanized closures
----
```
$max - *
*.chars > 5
(* ~ '.html').path.e

{ .underage_by = max(0, 18 - .age) }
{ "Coords: ($^x, $^y, $^z)" }

-> $name, $rank is rw, $serial? { ... }
```
----
XXXX: NativeCall
----
# Why Perl 6?
----
# SO
----
# SO MANY
----
# SO MANY REASONS
